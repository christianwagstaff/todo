(()=>{"use strict";var e={168:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"/* CSS RESET */\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n    box-sizing: border-box;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n","",{version:3,sources:["webpack://./src/style-reset.css"],names:[],mappings:"AAAA,cAAc;AACd;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;IACrB,sBAAsB;AAC1B;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* CSS RESET */\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n    box-sizing: border-box;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n"],sourceRoot:""}]);const d=i},426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,":root {\n    --todo-gap: 12px;\n    --nav-padding: 6px;\n    --clr-primary: #15CAFD;\n    --clr-secondary: #D4F6FF;\n    --clr-secondary-hover: #ffffff;\n    --clr-new: #bdf1ff;\n    --clr-priority-high: red;\n    --clr-priority-regular: blue;\n    --clr-priority-low: green;\n}\n\n* {\n    font-family: inherit;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    min-height: 100vh;\n    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\n}\n\nheader {\n    width: 100%;\n    background-color: var(--clr-primary);\n    height: 10vh;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 2rem;\n    font-family: 'Courier New', Courier, monospace;\n}\n\nmain {\n    flex-grow: 1;\n    display: flex;\n}\n\nnav, nav div, .todoList {\n    display: flex;\n    flex-direction: column;\n}\n\nnav {\n    background-color: var(--clr-secondary);\n    width: 25vw;\n}\n\nheader, .todoList {\n    padding: var(--todo-gap)\n}\n\n.rounded {\n    border-radius: 5px;;\n}\n\nnav {\n    padding-top: var(--todo-gap);\n    padding-left: var(--todo-gap);\n}\n\n/* Project List */\n.projectList {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.project {\n    border: none;\n    background-color: inherit;\n    margin: 0;\n    font-size: 1rem;\n    width: 100%;\n    text-align: start;\n    padding-top: var(--nav-padding);\n    padding-bottom: var(--nav-padding);\n}\n\n.project:hover, .active {\n    background-color: var(--clr-secondary-hover);\n    font-weight: 600;\n}\n.userProjectHeader {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    position: relative;\n}\n\n.userProjectHeader::after {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 1px;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    background-color: var(--clr-primary);\n}\n\n.userProjectHeader button {\n    width: 2rem;\n    border: none;\n    background-color: inherit;\n    font-weight: 100;\n    font-size: 1rem;\n}\n\n.userProjectList {\n    width: 100%;\n}\n\n.userProject {\n    display: flex;\n    justify-content: space-between;\n}\n\n.changeProjects {\n    display: none;\n    \n}\n\n.userProject:hover .changeProjects {\n    display: flex;\n    flex-direction: row-reverse;\n    gap: 6px;\n}\n\n/* Todo List */\n\n.todos {\n    flex-grow: 1;\n}\n\n.todoList {\n    flex-grow: 1;\n    gap: var(--todo-gap)\n}\n\n.todoListTitle {\n    font-size: x-large;\n}\n\n.todo {\n    display: flex;\n    align-items: flex-start;\n    gap: var(--todo-gap);\n    border-top: 1px solid var(--clr-new);\n    padding: 4px 8px;\n    width: 100%;\n    cursor: default;\n}\n\n.completed {\n    text-decoration: line-through;\n    opacity: 0.5;\n}\n\n.completeTodo {\n    border-radius: 50%;\n}\n\n.priority-1 .completeTodo{\n    color: var(--clr-priority-high);\n}\n\n.priority-2 .completeTodo{\n    color: var(--clr-priority-regular);\n}\n\n.priority-3 .completeTodo{\n    color: var(--clr-priority-low);\n}\n\n.todo i {\n    width: 1.3rem;\n    cursor: pointer;\n}\n\n.todoContent {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\n.todoTop {\n    display: flex;\n    justify-content: space-between;\n}\n\n.todoBottom {\n    font-size: 0.8rem;\n}\n\n.newTodo {\n    flex-direction: row;\n    justify-content: flex-start;\n    color: rgba(0,0,0,0.5);\n    cursor: default;\n}\n\n.newTodo i, .newTodo div {\n    pointer-events: none;\n}\n\n.newTodo:hover {\n    color: rgba(0,0,0,1)\n}\n\n/* New Todo Popup */\n.newTodoPopup, .updateTodoPopup {\n    display: none;    \n    position: absolute;\n    top: 40%;\n    left: 50%;\n    height: 50vh;\n    width: 50vw;\n    margin-left: -25vw;\n    margin-top:  -25vh;\n    background-color: aliceblue;\n    box-shadow: 2px 2px 5px 2px blue;\n    padding: var(--nav-padding)\n}\n\n.newTodoForm, .updateTodoForm {\n    display: flex;\n    flex-grow: 1;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: var(--todo-gap)\n}\n\n.popupInput {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    gap: var(--todo-gap)\n}\n\n.popupInput label::after {\n    content: ':';\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,wBAAwB;IACxB,8BAA8B;IAC9B,kBAAkB;IAClB,wBAAwB;IACxB,4BAA4B;IAC5B,yBAAyB;AAC7B;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,iBAAiB;IACjB;AACJ;;AAEA;IACI,WAAW;IACX,oCAAoC;IACpC,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,eAAe;IACf,8CAA8C;AAClD;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,sCAAsC;IACtC,WAAW;AACf;;AAEA;IACI;AACJ;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;IAC5B,6BAA6B;AACjC;;AAEA,iBAAiB;AACjB;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,SAAS;IACT,eAAe;IACf,WAAW;IACX,iBAAiB;IACjB,+BAA+B;IAC/B,kCAAkC;AACtC;;AAEA;IACI,4CAA4C;IAC5C,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,WAAW;IACX,WAAW;IACX,kBAAkB;IAClB,SAAS;IACT,OAAO;IACP,oCAAoC;AACxC;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,aAAa;;AAEjB;;AAEA;IACI,aAAa;IACb,2BAA2B;IAC3B,QAAQ;AACZ;;AAEA,cAAc;;AAEd;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ;AACJ;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,oBAAoB;IACpB,oCAAoC;IACpC,gBAAgB;IAChB,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,6BAA6B;IAC7B,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,2BAA2B;IAC3B,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI;AACJ;;AAEA,mBAAmB;AACnB;IACI,aAAa;IACb,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,2BAA2B;IAC3B,gCAAgC;IAChC;AACJ;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,sBAAsB;IACtB,8BAA8B;IAC9B;AACJ;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB;AACJ;;AAEA;IACI,YAAY;AAChB",sourcesContent:[":root {\n    --todo-gap: 12px;\n    --nav-padding: 6px;\n    --clr-primary: #15CAFD;\n    --clr-secondary: #D4F6FF;\n    --clr-secondary-hover: #ffffff;\n    --clr-new: #bdf1ff;\n    --clr-priority-high: red;\n    --clr-priority-regular: blue;\n    --clr-priority-low: green;\n}\n\n* {\n    font-family: inherit;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    min-height: 100vh;\n    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\n}\n\nheader {\n    width: 100%;\n    background-color: var(--clr-primary);\n    height: 10vh;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 2rem;\n    font-family: 'Courier New', Courier, monospace;\n}\n\nmain {\n    flex-grow: 1;\n    display: flex;\n}\n\nnav, nav div, .todoList {\n    display: flex;\n    flex-direction: column;\n}\n\nnav {\n    background-color: var(--clr-secondary);\n    width: 25vw;\n}\n\nheader, .todoList {\n    padding: var(--todo-gap)\n}\n\n.rounded {\n    border-radius: 5px;;\n}\n\nnav {\n    padding-top: var(--todo-gap);\n    padding-left: var(--todo-gap);\n}\n\n/* Project List */\n.projectList {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.project {\n    border: none;\n    background-color: inherit;\n    margin: 0;\n    font-size: 1rem;\n    width: 100%;\n    text-align: start;\n    padding-top: var(--nav-padding);\n    padding-bottom: var(--nav-padding);\n}\n\n.project:hover, .active {\n    background-color: var(--clr-secondary-hover);\n    font-weight: 600;\n}\n.userProjectHeader {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    position: relative;\n}\n\n.userProjectHeader::after {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 1px;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    background-color: var(--clr-primary);\n}\n\n.userProjectHeader button {\n    width: 2rem;\n    border: none;\n    background-color: inherit;\n    font-weight: 100;\n    font-size: 1rem;\n}\n\n.userProjectList {\n    width: 100%;\n}\n\n.userProject {\n    display: flex;\n    justify-content: space-between;\n}\n\n.changeProjects {\n    display: none;\n    \n}\n\n.userProject:hover .changeProjects {\n    display: flex;\n    flex-direction: row-reverse;\n    gap: 6px;\n}\n\n/* Todo List */\n\n.todos {\n    flex-grow: 1;\n}\n\n.todoList {\n    flex-grow: 1;\n    gap: var(--todo-gap)\n}\n\n.todoListTitle {\n    font-size: x-large;\n}\n\n.todo {\n    display: flex;\n    align-items: flex-start;\n    gap: var(--todo-gap);\n    border-top: 1px solid var(--clr-new);\n    padding: 4px 8px;\n    width: 100%;\n    cursor: default;\n}\n\n.completed {\n    text-decoration: line-through;\n    opacity: 0.5;\n}\n\n.completeTodo {\n    border-radius: 50%;\n}\n\n.priority-1 .completeTodo{\n    color: var(--clr-priority-high);\n}\n\n.priority-2 .completeTodo{\n    color: var(--clr-priority-regular);\n}\n\n.priority-3 .completeTodo{\n    color: var(--clr-priority-low);\n}\n\n.todo i {\n    width: 1.3rem;\n    cursor: pointer;\n}\n\n.todoContent {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\n.todoTop {\n    display: flex;\n    justify-content: space-between;\n}\n\n.todoBottom {\n    font-size: 0.8rem;\n}\n\n.newTodo {\n    flex-direction: row;\n    justify-content: flex-start;\n    color: rgba(0,0,0,0.5);\n    cursor: default;\n}\n\n.newTodo i, .newTodo div {\n    pointer-events: none;\n}\n\n.newTodo:hover {\n    color: rgba(0,0,0,1)\n}\n\n/* New Todo Popup */\n.newTodoPopup, .updateTodoPopup {\n    display: none;    \n    position: absolute;\n    top: 40%;\n    left: 50%;\n    height: 50vh;\n    width: 50vw;\n    margin-left: -25vw;\n    margin-top:  -25vh;\n    background-color: aliceblue;\n    box-shadow: 2px 2px 5px 2px blue;\n    padding: var(--nav-padding)\n}\n\n.newTodoForm, .updateTodoForm {\n    display: flex;\n    flex-grow: 1;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: var(--todo-gap)\n}\n\n.popupInput {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    gap: var(--todo-gap)\n}\n\n.popupInput label::after {\n    content: ':';\n}"],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var u=this[d][0];null!=u&&(i[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&i[s[0]]||(void 0!==o&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=o),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},512:(e,t,n)=>{n.r(t),n.d(t,{default:()=>g});var r=n(379),a=n.n(r),o=n(795),i=n.n(o),d=n(569),u=n.n(d),c=n(565),s=n.n(c),l=n(216),f=n.n(l),p=n(589),h=n.n(p),m=n(168),A={};A.styleTagTransform=h(),A.setAttributes=s(),A.insert=u().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=f(),a()(m.Z,A);const g=m.Z&&m.Z.locals?m.Z.locals:void 0},654:(e,t,n)=>{n.r(t),n.d(t,{default:()=>g});var r=n(379),a=n.n(r),o=n(795),i=n.n(o),d=n(569),u=n.n(d),c=n(565),s=n.n(c),l=n(216),f=n.n(l),p=n(589),h=n.n(p),m=n(426),A={};A.styleTagTransform=h(),A.setAttributes=s(),A.insert=u().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=f(),a()(m.Z,A);const g=m.Z&&m.Z.locals?m.Z.locals:void 0},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],d=0;d<e.length;d++){var u=e[d],c=r.base?u[0]+r.base:u[0],s=o[c]||0,l="".concat(c," ").concat(s);o[c]=s+1;var f=n(l),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=a(p,r);r.byIndex=d,t.splice(d,0,{identifier:l,updater:h,references:1})}i.push(l)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var d=n(o[i]);t[d].references--}for(var u=r(e,a),c=0;c<o.length;c++){var s=n(o[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}o=u}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},0:(e,t,n)=>{const r=JSON.parse('{"userPreferences":{"hideComplete":"false"},"default":[{"title":"TODO 1","description":"Description 1","dueDate":"2021-12-01","priority":"1","project":"default","completed":"false"},{"title":"TODO 2","description":"Description 2","dueDate":"2021-01-01","priority":"2","project":"default","completed":"false"},{"title":"TODO 3","description":"Description 3","dueDate":"2021-01-01","priority":"3","project":"default","completed":"false"}],"Project 1":[{"title":"TODO 11","description":"Description 1","dueDate":"2021-01-01","priority":"1","project":"Project 1","completed":"false"},{"title":"TODO 21","description":"Description 2","dueDate":"2021-01-01","priority":"2","project":"Project 1","completed":"false"},{"title":"TODO 31","description":"Description 3","dueDate":"2021-01-01","priority":"3","project":"Project 1","completed":"false"}]}');function a(e,t){t&&localStorage.setItem(e,JSON.stringify(t))}function o(e){return!!localStorage.getItem(e)}function i(e){let t,n=u();if(n.unshift("default"),"together"===e){t=[];for(let e of n)if(o(e)){let n=JSON.parse(localStorage.getItem(e));c(n),t.push(...n)}}else if("separate"===e){t={};for(let e of n)if(o(e)){let n=JSON.parse(localStorage.getItem(e));c(n),t[e]=n}}return t}function d(e){if("all"===e)return i("together");if("allList"===e)return i("separate");let t=localStorage.getItem(e);return t?c(JSON.parse(t)):void 0}function u(){let e=Object.keys(r);if(!localStorage[e[1]])for(let t of e)"userPreferences"!==t&&a(t,r[t]);let t=Object.keys(localStorage).reverse();return t=t.filter((function(e){return"default"!==e})),t}function c(e){if(!e)return;let t=0;for(let n of e)n.index=t,t++;return e}function s(e,t="",n=""){let r=document.createElement(e);if(""!==t){let e=t.split(" ");for(let t of e)r.classList.add(t)}return""!==n&&(r.textContent=n),r}function l(e,t){let n=document.createElement("label");return n.setAttribute("for",e),n.textContent=t,n}function f(e,t,n,r){let a=function(e,t,n){let r=document.createElement("input");return r.setAttribute("type",e),r.setAttribute("name",t),r.setAttribute("id",t),r.setAttribute("placeholder",n),r}(e,t,n),o=l(t,r),i=s("div","popupInput");return i.appendChild(o),i.appendChild(a),i}function p(e,t,n){let r=l(e,n),a=document.createElement("select");a.id=e;for(let e of t){let t=new Option(e[0],e[1]);a.appendChild(t)}let o=s("div","popupInput");return o.appendChild(r),o.appendChild(a),o}function h(e,t,n){let r=s("button","btn",t);return r.setAttribute("type",e),r.id=n,r}function m(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function A(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}var g=36e5,w={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},v=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,C=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,y=/^([+-])(\d{2})(?::?(\d{2}))?$/;function b(e,t){A(1,arguments);var n=t||{},r=null==n.additionalDigits?2:m(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,o=T(e);if(o.date){var i=x(o.date,r);a=B(i.restDateString,i.year)}if(isNaN(a)||!a)return new Date(NaN);var d,u=a.getTime(),c=0;if(o.time&&(c=k(o.time),isNaN(c)||null===c))return new Date(NaN);if(!o.timezone){var s=new Date(u+c),l=new Date(0);return l.setFullYear(s.getUTCFullYear(),s.getUTCMonth(),s.getUTCDate()),l.setHours(s.getUTCHours(),s.getUTCMinutes(),s.getUTCSeconds(),s.getUTCMilliseconds()),l}return d=P(o.timezone),isNaN(d)?new Date(NaN):new Date(u+c+d)}function T(e){var t,n={},r=e.split(w.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],w.timeZoneDelimiter.test(n.date)&&(n.date=e.split(w.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=w.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function x(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),o=r[2]&&parseInt(r[2]);return{year:null==o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function B(e,t){if(null===t)return null;var n=e.match(v);if(!n)return null;var r=!!n[4],a=D(n[1]),o=D(n[2])-1,i=D(n[3]),d=D(n[4]),u=D(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,d,u)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,d,u):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(S[t]||(U(e)?29:28))}(t,o,i)&&function(e,t){return t>=1&&t<=(U(e)?366:365)}(t,a)?(c.setUTCFullYear(t,o,Math.max(a,i)),c):new Date(NaN)}function D(e){return e?parseInt(e):1}function k(e){var t=e.match(C);if(!t)return null;var n=I(t[1]),r=I(t[2]),a=I(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*g+6e4*r+1e3*a:NaN}function I(e){return e&&parseFloat(e.replace(",","."))||0}function P(e){if("Z"===e)return 0;var t=e.match(y);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*g+6e4*a):NaN}var S=[31,null,31,30,31,30,31,31,30,31,30,31];function U(e){return e%400==0||e%4==0&&e%100}const j=class{constructor(e,t,n,r){this.title=e,this.description=t,this.dueDate=b(n)?b(n):n,this.priority=r}changeTitle(e){this.title=e}changeDesciption(e){this.description=e}changeDueDate(e){this.dueDate=e}changePriority(e){this.priority=e}changeProject(e){this.project=e}completedTodo(e){this.completed=!0,this.completedDate=e}};function E(e){let t=new j(e.title,e.description,e.dueDate,e.priority);return t.project=e.project,t.completed=M(e.completed),t.index=e.index,t}function M(e){return"string"==typeof e||e instanceof String?"true"===e:e}function q(e){let t=[];if(e)for(let n of e)t.push(E(n));return t}let L={circle:"far fa-circle",plus:"fas fa-plus",checked:"far fa-check-circle",cog:"far fa-cog",trash:"far fa-trash-alt",edit:"far fa-edit"};function N(e){return""===e?"Nothing Selected":s("i",L[e])}function Y(e){return A(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function W(e){A(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function O(e){if(A(1,arguments),!Y(e)&&"number"!=typeof e)return!1;var t=W(e);return!isNaN(Number(t))}var H={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function F(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var R,Q={date:F({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:F({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:F({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},z={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function X(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var d=e.defaultWidth,u=a.width?String(a.width):e.defaultWidth;r=e.values[u]||e.values[d]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function Z(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,d=o[0],u=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(u)?$(u,(function(e){return e.test(d)})):G(u,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var s=t.slice(d.length);return{value:i,rest:s}}}function G(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function $(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const J={code:"en-US",formatDistance:function(e,t,n){var r,a=H[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:Q,formatRelative:function(e,t,n,r){return z[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:X({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:X({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:X({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:X({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:X({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(R={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(R.matchPattern);if(!n)return null;var r=n[0],a=e.match(R.parsePattern);if(!a)return null;var o=R.valueCallback?R.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:Z({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Z({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Z({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Z({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Z({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function K(e,t){A(2,arguments);var n=W(e).getTime(),r=m(t);return new Date(n+r)}function _(e,t){A(2,arguments);var n=m(t);return K(e,-n)}function V(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const ee=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return V("yy"===t?r%100:r,t.length)},te=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):V(n+1,2)},ne=function(e,t){return V(e.getUTCDate(),t.length)},re=function(e,t){return V(e.getUTCHours()%12||12,t.length)},ae=function(e,t){return V(e.getUTCHours(),t.length)},oe=function(e,t){return V(e.getUTCMinutes(),t.length)},ie=function(e,t){return V(e.getUTCSeconds(),t.length)},de=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return V(Math.floor(r*Math.pow(10,n-3)),t.length)};var ue=864e5;function ce(e){A(1,arguments);var t=1,n=W(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function se(e){A(1,arguments);var t=W(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=ce(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=ce(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function le(e){A(1,arguments);var t=se(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=ce(n);return r}var fe=6048e5;function pe(e){A(1,arguments);var t=W(e),n=ce(t).getTime()-le(t).getTime();return Math.round(n/fe)+1}function he(e,t){A(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:m(a),i=null==n.weekStartsOn?o:m(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=W(e),u=d.getUTCDay(),c=(u<i?7:0)+u-i;return d.setUTCDate(d.getUTCDate()-c),d.setUTCHours(0,0,0,0),d}function me(e,t){A(1,arguments);var n=W(e,t),r=n.getUTCFullYear(),a=t||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,d=null==i?1:m(i),u=null==a.firstWeekContainsDate?d:m(a.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,u),c.setUTCHours(0,0,0,0);var s=he(c,t),l=new Date(0);l.setUTCFullYear(r,0,u),l.setUTCHours(0,0,0,0);var f=he(l,t);return n.getTime()>=s.getTime()?r+1:n.getTime()>=f.getTime()?r:r-1}function Ae(e,t){A(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:m(a),i=null==n.firstWeekContainsDate?o:m(n.firstWeekContainsDate),d=me(e,t),u=new Date(0);u.setUTCFullYear(d,0,i),u.setUTCHours(0,0,0,0);var c=he(u,t);return c}var ge=6048e5;function we(e,t){A(1,arguments);var n=W(e),r=he(n,t).getTime()-Ae(n,t).getTime();return Math.round(r/ge)+1}function ve(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+V(o,2)}function Ce(e,t){return e%60==0?(e>0?"-":"+")+V(Math.abs(e)/60,2):ye(e,t)}function ye(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+V(Math.floor(a/60),2)+n+V(a%60,2)}const be={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return ee(e,t)},Y:function(e,t,n,r){var a=me(e,r),o=a>0?a:1-a;return"YY"===t?V(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):V(o,t.length)},R:function(e,t){return V(se(e),t.length)},u:function(e,t){return V(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return V(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return V(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return te(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return V(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=we(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):V(a,t.length)},I:function(e,t,n){var r=pe(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):V(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ne(e,t)},D:function(e,t,n){var r=function(e){A(1,arguments);var t=W(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/ue)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):V(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return V(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return V(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return V(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return re(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ae(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):V(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):V(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):oe(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ie(e,t)},S:function(e,t){return de(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Ce(a);case"XXXX":case"XX":return ye(a);default:return ye(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Ce(a);case"xxxx":case"xx":return ye(a);default:return ye(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+ve(a,":");default:return"GMT"+ye(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+ve(a,":");default:return"GMT"+ye(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return V(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return V((r._originalDate||e).getTime(),t.length)}};function Te(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function xe(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var Be={p:xe,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return Te(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Te(a,t)).replace("{{time}}",xe(o,t))}};const De=Be;function ke(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var Ie=["D","DD"],Pe=["YY","YYYY"];function Se(e){return-1!==Ie.indexOf(e)}function Ue(e){return-1!==Pe.indexOf(e)}function je(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Ee=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Me=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,qe=/^'([^]*?)'?$/,Le=/''/g,Ne=/[a-zA-Z]/;function Ye(e,t,n){A(2,arguments);var r=String(t),a=n||{},o=a.locale||J,i=o.options&&o.options.firstWeekContainsDate,d=null==i?1:m(i),u=null==a.firstWeekContainsDate?d:m(a.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=o.options&&o.options.weekStartsOn,s=null==c?0:m(c),l=null==a.weekStartsOn?s:m(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var f=W(e);if(!O(f))throw new RangeError("Invalid time value");var p=ke(f),h=_(f,p),g={firstWeekContainsDate:u,weekStartsOn:l,locale:o,_originalDate:f},w=r.match(Me).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,De[t])(e,o.formatLong,g):e})).join("").match(Ee).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return We(n);var i=be[r];if(i)return!a.useAdditionalWeekYearTokens&&Ue(n)&&je(n,t,e),!a.useAdditionalDayOfYearTokens&&Se(n)&&je(n,t,e),i(h,n,o.localize,g);if(r.match(Ne))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return w}function We(e){return e.match(qe)[1].replace(Le,"'")}function Oe(e,t){A(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:m(a),i=null==n.weekStartsOn?o:m(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=W(e),u=d.getDay(),c=(u<i?7:0)+u-i;return d.setDate(d.getDate()-c),d.setHours(0,0,0,0),d}function He(e,t,n){A(2,arguments);var r=Oe(e,n),a=Oe(t,n);return r.getTime()===a.getTime()}function Fe(e){A(1,arguments);var t=W(e);return t.setHours(0,0,0,0),t}function Re(e,t){A(2,arguments);var n=Fe(e),r=Fe(t);return n.getTime()===r.getTime()}function Qe(e){return A(1,arguments),Re(e,Date.now())}function ze(e,t){A(2,arguments);var n=W(e),r=W(t);return n.getTime()>r.getTime()}const Xe=function(){function e(e){let t,n=s("div","todo"),r=s("div","todoContent"),a=s("div","todoTop"),o=s("div","todoBottom");e.completed?(t=N("checked"),n.classList.add("completed")):t=N("circle"),t.classList.add("completeTodo");let i=N("trash");i.classList.add("deleteTodo");let d=N("edit");return d.classList.add("editTodo"),a.appendChild(s("h2","todoTitle",e.title)),a.appendChild(s("p","todoDueDate",e.dueDate)),o.appendChild(s("p","todoDesc",e.description)),r.appendChild(a),r.appendChild(o),n.appendChild(t),n.appendChild(r),n.appendChild(d),n.appendChild(i),n.classList.add(`priority-${e.priority}`),n.dataset.project=e.project,n.dataset.completed=e.completed,n.dataset.priority=e.priority,n}function t(){let e=N("plus"),t=s("div","","Add Task"),n=s("div","todo newTodo");return n.appendChild(e),n.appendChild(t),n}function n(t,n,r=!0){if(n)for(let a of n)if(r){let n=e(a);n.dataset.id=a.index,t.appendChild(n)}else if(console.log(a.completed),!a.completed){let n=e(a);n.dataset.id=a.index,t.appendChild(n)}}function r(e){return s("h2","todoListTitle",e)}return{createNewTodo:function(e,t){let n=function(e,t){let n=new j(e[0],e[1],e[2],e[3]);return n.project=t,n.completed=!1,n}(e,t),r=q(d(t));r.push(n),a(t,r)},renderTodos:function(e){let a=q(d(e));for(let e of a)e.dueDate=Ye(e.dueDate,"P");let o=r(e),i=s("div","todoList");return i.appendChild(o),n(i,a,!1),i.appendChild(t()),i},renderTodosByDate:function(e){let a,o=q(d("all")),i=[],u=s("div","todoList");if(o){for(let t of o){let n=t.completed;"thisWeek"!==e||n?"today"!==e||n?"pastDue"!==e||n?"completed"===e?(a="Completed",t.completed&&i.push(t)):"all"!==e||n||(a="Home",i.push(t)):(a="Past Due",ze(new Date,t.dueDate)&&i.push(t)):(a="Today",Qe(t.dueDate)&&i.push(t)):(a="This Week",He(new Date,t.dueDate)&&i.push(t))}if(0===i.length&&"completed"===e)return u.appendChild(r("Completed")),u.appendChild(s("div","todo rounded","Nothing to see here!")),u}for(let e of i)e.dueDate=Ye(e.dueDate,"P");return u.appendChild(r(a)),n(u,i),"completed"!==e&&u.appendChild(t()),u},completeTodo:function(e,t){let n=q(d(e));if(!n)return void console.error("Complete Todo: Project not found");if(void 0===n[t])return void console.error("Complete Todo: Index not in project");let r=n[t].completed;n[t].completed=!r,a(e,n)},deleteTodo:function(e,t){let n=q(d(e));n?void 0!==n[t]?(n.splice(t,1),a(e,n)):console.error("Complete Todo: Index not in project"):console.error("Complete Todo: Project not found")},updateTodo:function(e,t,n){let r=q(d(e));r?void 0!==r[t]?(r.splice(t,1,n),a(e,r)):console.error("Update Todo: Index not in project"):console.error("Update Todo: Project not found")}}}(),Ze={createHeader:function(){let e=s("header","header","Todo List"),t=N("cog");return t.classList.add("userPreferences"),e.appendChild(t),e}},Ge=Ze;let $e=function(){function e(){let e=s("div","userProjectList"),t=u();if(t)for(let n of t){let t=s("button","project userProject",n),r=s("div","changeProjects"),a=N("trash"),o=N("edit");a.classList.add("deleteProject"),o.classList.add("editProject"),t.dataset.index=n,r.appendChild(a),r.appendChild(o),t.appendChild(r),e.appendChild(t)}return e}return{createTodoNavBar:function(){let t=s("nav","nav");return t.appendChild(function(){let e=s("div","navHeader projectList"),t=s("button","project homePageBtn active navProject","Home"),n=s("button","project todayBtn navProject","Today"),r=s("button","project thisWeekBtn navProject","This Week"),a=s("button","project pastDueBtn navProject","Past Due"),o=s("button","project completedBtn navProject","Completed");return t.dataset.index="all",n.dataset.index="today",r.dataset.index="thisWeek",a.dataset.index="pastDue",o.dataset.index="completed",e.appendChild(t),e.appendChild(n),e.appendChild(r),e.appendChild(a),e.appendChild(o),e}()),t.appendChild(function(){let t=s("div","userProjects projectList");return t.appendChild(function(){let e=s("div","userProjectHeader"),t=document.createElement("h2");t.textContent="Projects";let n=s("button","newUserProject","+");return e.appendChild(t),e.appendChild(n),e}()),t.appendChild(e()),t.appendChild(function(){let e=s("button","newUserProject project");return e.textContent="+ Add Project",e}()),t}()),t},updateUserProjects:function(e){var t;/\S/.test(e)&&e&&(t=e=e.trim(),localStorage.getItem(t)||localStorage.setItem(t,"[]"))},createUserProjectList:e}}();const Je=$e,Ke=function(e,t,n){if(e.target&&e.target.nodeName===t&&e.target.classList.contains(n))return!0};function _e(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function Ve(e,t,n){A(2,arguments);var r=n||{},a=r.locale,o=a&&a.options&&a.options.weekStartsOn,i=null==o?0:m(o),d=null==r.weekStartsOn?i:m(r.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=W(e),c=m(t),s=u.getUTCDay(),l=c%7,f=(l+7)%7,p=(f<d?7:0)+c-s;return u.setUTCDate(u.getUTCDate()+p),u}var et=/^(1[0-2]|0?\d)/,tt=/^(3[0-1]|[0-2]?\d)/,nt=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,rt=/^(5[0-3]|[0-4]?\d)/,at=/^(2[0-3]|[0-1]?\d)/,ot=/^(2[0-4]|[0-1]?\d)/,it=/^(1[0-1]|0?\d)/,dt=/^(1[0-2]|0?\d)/,ut=/^[0-5]?\d/,ct=/^[0-5]?\d/,st=/^\d/,lt=/^\d{1,2}/,ft=/^\d{1,3}/,pt=/^\d{1,4}/,ht=/^-?\d+/,mt=/^-?\d/,At=/^-?\d{1,2}/,gt=/^-?\d{1,3}/,wt=/^-?\d{1,4}/,vt=/^([+-])(\d{2})(\d{2})?|Z/,Ct=/^([+-])(\d{2})(\d{2})|Z/,yt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,bt=/^([+-])(\d{2}):(\d{2})|Z/,Tt=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function xt(e,t,n){var r=t.match(e);if(!r)return null;var a=parseInt(r[0],10);return{value:n?n(a):a,rest:t.slice(r[0].length)}}function Bt(e,t){var n=t.match(e);return n?"Z"===n[0]?{value:0,rest:t.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:t.slice(n[0].length)}:null}function Dt(e,t){return xt(ht,e,t)}function kt(e,t,n){switch(e){case 1:return xt(st,t,n);case 2:return xt(lt,t,n);case 3:return xt(ft,t,n);case 4:return xt(pt,t,n);default:return xt(new RegExp("^\\d{1,"+e+"}"),t,n)}}function It(e,t,n){switch(e){case 1:return xt(mt,t,n);case 2:return xt(At,t,n);case 3:return xt(gt,t,n);case 4:return xt(wt,t,n);default:return xt(new RegExp("^-?\\d{1,"+e+"}"),t,n)}}function Pt(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function St(e,t){var n,r=t>0,a=r?t:1-t;if(a<=50)n=e||100;else{var o=a+50;n=e+100*Math.floor(o/100)-(e>=o%100?100:0)}return r?n:1-n}var Ut=[31,28,31,30,31,30,31,31,30,31,30,31],jt=[31,29,31,30,31,30,31,31,30,31,30,31];function Et(e){return e%400==0||e%4==0&&e%100!=0}const Mt={G:{priority:140,parse:function(e,t,n,r){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}},set:function(e,t,n,r){return t.era=n,e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(e,t,n,r){var a=function(e){return{year:e,isTwoDigitYear:"yy"===t}};switch(t){case"y":return kt(4,e,a);case"yo":return n.ordinalNumber(e,{unit:"year",valueCallback:a});default:return kt(t.length,e,a)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,r){var a=e.getUTCFullYear();if(n.isTwoDigitYear){var o=St(n.year,a);return e.setUTCFullYear(o,0,1),e.setUTCHours(0,0,0,0),e}var i="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(i,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(e,t,n,r){var a=function(e){return{year:e,isTwoDigitYear:"YY"===t}};switch(t){case"Y":return kt(4,e,a);case"Yo":return n.ordinalNumber(e,{unit:"year",valueCallback:a});default:return kt(t.length,e,a)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,r){var a=me(e,r);if(n.isTwoDigitYear){var o=St(n.year,a);return e.setUTCFullYear(o,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),he(e,r)}var i="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(i,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),he(e,r)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(e,t,n,r){return It("R"===t?4:t.length,e)},set:function(e,t,n,r){var a=new Date(0);return a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0),ce(a)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(e,t,n,r){return It("u"===t?4:t.length,e)},set:function(e,t,n,r){return e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(e,t,n,r){switch(t){case"Q":case"QQ":return kt(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,r){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(e,t,n,r){switch(t){case"q":case"qq":return kt(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,r){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(e,t,n,r){var a=function(e){return e-1};switch(t){case"M":return xt(et,e,a);case"MM":return kt(2,e,a);case"Mo":return n.ordinalNumber(e,{unit:"month",valueCallback:a});case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(e,t,n,r){var a=function(e){return e-1};switch(t){case"L":return xt(et,e,a);case"LL":return kt(2,e,a);case"Lo":return n.ordinalNumber(e,{unit:"month",valueCallback:a});case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(e,t,n,r){switch(t){case"w":return xt(rt,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,r){return he(function(e,t,n){A(2,arguments);var r=W(e),a=m(t),o=we(r,n)-a;return r.setUTCDate(r.getUTCDate()-7*o),r}(e,n,r),r)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(e,t,n,r){switch(t){case"I":return xt(rt,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,r){return ce(function(e,t){A(2,arguments);var n=W(e),r=m(t),a=pe(n)-r;return n.setUTCDate(n.getUTCDate()-7*a),n}(e,n,r),r)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(e,t,n,r){switch(t){case"d":return xt(tt,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return kt(t.length,e)}},validate:function(e,t,n){var r=Et(e.getUTCFullYear()),a=e.getUTCMonth();return r?t>=1&&t<=jt[a]:t>=1&&t<=Ut[a]},set:function(e,t,n,r){return e.setUTCDate(n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(e,t,n,r){switch(t){case"D":case"DD":return xt(nt,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return kt(t.length,e)}},validate:function(e,t,n){return Et(e.getUTCFullYear())?t>=1&&t<=366:t>=1&&t<=365},set:function(e,t,n,r){return e.setUTCMonth(0,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(e,t,n,r){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=Ve(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return kt(t.length,e,a);case"eo":return n.ordinalNumber(e,{unit:"day",valueCallback:a});case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=Ve(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return kt(t.length,e,a);case"co":return n.ordinalNumber(e,{unit:"day",valueCallback:a});case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=Ve(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(e,t,n,r){var a=function(e){return 0===e?7:e};switch(t){case"i":case"ii":return kt(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return n.day(e,{width:"abbreviated",context:"formatting",valueCallback:a})||n.day(e,{width:"short",context:"formatting",valueCallback:a})||n.day(e,{width:"narrow",context:"formatting",valueCallback:a});case"iiiii":return n.day(e,{width:"narrow",context:"formatting",valueCallback:a});case"iiiiii":return n.day(e,{width:"short",context:"formatting",valueCallback:a})||n.day(e,{width:"narrow",context:"formatting",valueCallback:a});default:return n.day(e,{width:"wide",context:"formatting",valueCallback:a})||n.day(e,{width:"abbreviated",context:"formatting",valueCallback:a})||n.day(e,{width:"short",context:"formatting",valueCallback:a})||n.day(e,{width:"narrow",context:"formatting",valueCallback:a})}},validate:function(e,t,n){return t>=1&&t<=7},set:function(e,t,n,r){return e=function(e,t){A(2,arguments);var n=m(t);n%7==0&&(n-=7);var r=1,a=W(e),o=a.getUTCDay(),i=((n%7+7)%7<r?7:0)+n-o;return a.setUTCDate(a.getUTCDate()+i),a}(e,n,r),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(e,t,n,r){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(Pt(n),0,0,0),e},incompatibleTokens:["b","B","H","K","k","t","T"]},b:{priority:80,parse:function(e,t,n,r){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(Pt(n),0,0,0),e},incompatibleTokens:["a","B","H","K","k","t","T"]},B:{priority:80,parse:function(e,t,n,r){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(Pt(n),0,0,0),e},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(e,t,n,r){switch(t){case"h":return xt(dt,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=12},set:function(e,t,n,r){var a=e.getUTCHours()>=12;return a&&n<12?e.setUTCHours(n+12,0,0,0):a||12!==n?e.setUTCHours(n,0,0,0):e.setUTCHours(0,0,0,0),e},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(e,t,n,r){switch(t){case"H":return xt(at,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=23},set:function(e,t,n,r){return e.setUTCHours(n,0,0,0),e},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(e,t,n,r){switch(t){case"K":return xt(it,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.getUTCHours()>=12&&n<12?e.setUTCHours(n+12,0,0,0):e.setUTCHours(n,0,0,0),e},incompatibleTokens:["a","b","h","H","k","t","T"]},k:{priority:70,parse:function(e,t,n,r){switch(t){case"k":return xt(ot,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=24},set:function(e,t,n,r){var a=n<=24?n%24:n;return e.setUTCHours(a,0,0,0),e},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(e,t,n,r){switch(t){case"m":return xt(ut,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,r){return e.setUTCMinutes(n,0,0),e},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(e,t,n,r){switch(t){case"s":return xt(ct,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return kt(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,r){return e.setUTCSeconds(n,0),e},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(e,t,n,r){return kt(t.length,e,(function(e){return Math.floor(e*Math.pow(10,3-t.length))}))},set:function(e,t,n,r){return e.setUTCMilliseconds(n),e},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(e,t,n,r){switch(t){case"X":return Bt(vt,e);case"XX":return Bt(Ct,e);case"XXXX":return Bt(yt,e);case"XXXXX":return Bt(Tt,e);default:return Bt(bt,e)}},set:function(e,t,n,r){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(e,t,n,r){switch(t){case"x":return Bt(vt,e);case"xx":return Bt(Ct,e);case"xxxx":return Bt(yt,e);case"xxxxx":return Bt(Tt,e);default:return Bt(bt,e)}},set:function(e,t,n,r){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(e,t,n,r){return Dt(e)},set:function(e,t,n,r){return[new Date(1e3*n),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(e,t,n,r){return Dt(e)},set:function(e,t,n,r){return[new Date(n),{timestampIsSet:!0}]},incompatibleTokens:"*"}};var qt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Lt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Nt=/^'([^]*?)'?$/,Yt=/''/g,Wt=/\S/,Ot=/[a-zA-Z]/;function Ht(e,t){if(t.timestampIsSet)return e;var n=new Date(0);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}function Ft(e){return e.match(Nt)[1].replace(Yt,"'")}n(512),n(654);let Rt=document.createElement("script");Rt.src="https://kit.fontawesome.com/affeb91e0c.js",Rt.crossOrigin="anonymous",document.head.appendChild(Rt),document.body.appendChild(Ge.createHeader());let Qt=s("main","main");document.body.appendChild(Qt);const zt=document.querySelector(".main"),Xt=document.querySelector(".userPreferences");zt.appendChild(Je.createTodoNavBar()),zt.appendChild(s("div","todos")),document.body.appendChild(function(){let e=s("div","newTodoPopup"),t=s("form","newTodoForm"),n=f("text","newTitle","Todo Title","Title"),r=f("text","newDescription","Description","Description"),a=f("date","newDueDate","","Due Date"),o=p("newPriority",[["High",1],["Medium",2],["Low",3]],"Priority"),i=h("submit","Save Todo","submitNew"),d=h("button","Cancel","cancelNew"),u=s("div","formButtons");return u.appendChild(d),u.appendChild(i),t.appendChild(n),t.appendChild(r),t.appendChild(a),t.appendChild(o),t.appendChild(u),e.appendChild(t),e}()),document.body.appendChild(function(){let e=s("div","updateTodoPopup"),t=s("form","updateTodoForm"),n=f("text","updateTitle","Todo Title","Title"),r=f("text","updateDescription","Description","Description"),a=f("date","updateDueDate","","Due Date"),o=p("updatePriority",[["High",1],["Medium",2],["Low",3]],"Priority"),i=h("submit","Save Todo","submitUpdate"),d=h("button","Cancel","cancelUpdate"),u=s("div","formButtons");return u.appendChild(d),u.appendChild(i),t.appendChild(n),t.appendChild(r),t.appendChild(a),t.appendChild(o),t.appendChild(u),e.appendChild(t),e}());const Zt=document.querySelector("nav"),Gt=Zt.querySelectorAll(".navProject"),$t=Zt.querySelectorAll(".newUserProject"),Jt=Zt.querySelector(".userProjects"),Kt=document.querySelector(".todos"),_t=Zt.querySelector(".homePageBtn"),Vt=Zt.querySelector(".todayBtn"),en=Zt.querySelector(".thisWeekBtn"),tn=Zt.querySelector(".pastDueBtn"),nn=Zt.querySelector(".completedBtn"),rn=document.querySelector(".newTodoPopup"),an=document.querySelector(".newTodoForm"),on=document.getElementById("cancelNew"),dn=document.querySelector(".updateTodoPopup"),un=document.querySelector(".updateTodoForm"),cn=document.getElementById("cancelUpdate");function sn(){let e=prompt("New Project");""!==e&&e&&(Je.updateUserProjects(e),mn())}function ln(e){pn(e)}function fn(){Jt.querySelectorAll(".userProject").forEach((e=>e.classList.remove("active"))),Gt.forEach((e=>e.classList.remove("active")))}function pn(e){fn(),e.target?e.target.classList.add("active"):document.querySelector(e).classList.add("active")}function hn(e){Kt.removeChild(Kt.firstChild),Kt.appendChild(Xe.renderTodos(e))}function mn(){let e=Jt.querySelector(".userProjectList");Jt.replaceChild(Je.createUserProjectList(),e)}function An(){vn("new"),rn.style.display="none"}function gn(){vn("update"),dn.style.display="none",delete un.dataset.project,delete un.dataset.id,delete un.dataset.completed}function wn(e){let t;return"new"===e?t=an.elements:"update"===e&&(t=un.elements),[t[`${e}Title`].value,t[`${e}Description`].value,t[`${e}DueDate`].value,t[`${e}Priority`].value]}function vn(e){let t;"new"===e?t=an.elements:"update"===e&&(t=un.elements);for(const e of t)e.value=""}function Cn(e){Kt.removeChild(Kt.firstChild),Kt.appendChild(Xe.renderTodosByDate(e))}function yn(e){Cn(e.target.dataset.index)}function bn(){let e=Zt.querySelector(".active");e.classList.contains("userProject")?hn(e.dataset.index):e.classList.contains("navProject")&&Cn(e.dataset.index)}Kt.appendChild(Xe.renderTodosByDate("all")),$t.forEach((e=>e.addEventListener("click",sn))),Gt.forEach((e=>e.addEventListener("click",ln))),Jt.addEventListener("click",(function(e){if(Ke(e,"BUTTON","userProject")){let t=e.target.textContent;pn(e),hn(t)}})),Jt.addEventListener("click",(function(e){if(Ke(e,"I","deleteProject")){let n=e.target.closest(".userProject"),r=n.textContent;confirm(`Are you sure you want to delete ${r} and all it's tasks?`)&&("default"!==(t=r)&&"userPreferences"!==t&&localStorage.removeItem(t),Zt.querySelector(".active")===n&&(Cn("all"),pn(".homePageBtn")),mn())}var t})),Jt.addEventListener("click",(function(e){if(Ke(e,"I","editProject")){let r=e.target.closest(".userProject").textContent,i=prompt(`What do you want to rename ${r} to?`);if(""===i||!i)return;if(o(i))return void alert(`Cannot Complete Request: ${i} already exists!`);t=i,"default"!==(n=r)&&"userPreferences"!==n&&(localStorage.getItem(t)?alert(`Cannot Complete Request: ${t} already exists!`):(a(t,d(n)),localStorage.removeItem(n))),hn(i),mn();let u=`[data-index="${i}"]`,c=document.querySelector(u);fn(),c.classList.add("active")}var t,n})),Kt.addEventListener("click",(function(e){if(Ke(e,"DIV","newTodo"))rn.style.display="flex";else if(Ke(e,"I","editTodo")){dn.style.display="flex";let t=function(e){let t=e.target.closest(".todo");return[t.dataset.project,t.dataset.id,t.dataset.completed]}(e);un.dataset.project=t[0],un.dataset.id=t[1],un.dataset.completed=t[2],function(e){let t=e.target.closest(".todo"),n=un.elements;n.updateTitle.value=t.querySelector(".todoTitle").textContent,n.updateDescription.value=t.querySelector(".todoDesc").textContent,n.updatePriority.value=t.dataset.priority,n.updateDueDate.value=function(e,t,n,r){A(3,arguments);var a=String(e),o=String(t),i=r||{},d=i.locale||J;if(!d.match)throw new RangeError("locale must contain match property");var u=d.options&&d.options.firstWeekContainsDate,c=null==u?1:m(u),s=null==i.firstWeekContainsDate?c:m(i.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=d.options&&d.options.weekStartsOn,f=null==l?0:m(l),p=null==i.weekStartsOn?f:m(i.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===o)return""===a?W(n):new Date(NaN);var h,g={firstWeekContainsDate:s,weekStartsOn:p,locale:d},w=[{priority:10,subPriority:-1,set:Ht,index:0}],v=o.match(Lt).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,De[t])(e,d.formatLong,g):e})).join("").match(qt),C=[];for(h=0;h<v.length;h++){var y=v[h];!i.useAdditionalWeekYearTokens&&Ue(y)&&je(y,o,e),!i.useAdditionalDayOfYearTokens&&Se(y)&&je(y,o,e);var b=y[0],T=Mt[b];if(T){var x=T.incompatibleTokens;if(Array.isArray(x)){for(var B=void 0,D=0;D<C.length;D++){var k=C[D].token;if(-1!==x.indexOf(k)||k===b){B=C[D];break}}if(B)throw new RangeError("The format string mustn't contain `".concat(B.fullToken,"` and `").concat(y,"` at the same time"))}else if("*"===T.incompatibleTokens&&C.length)throw new RangeError("The format string mustn't contain `".concat(y,"` and any other token at the same time"));C.push({token:b,fullToken:y});var I=T.parse(a,y,d.match,g);if(!I)return new Date(NaN);w.push({priority:T.priority,subPriority:T.subPriority||0,set:T.set,validate:T.validate,value:I.value,index:w.length}),a=I.rest}else{if(b.match(Ot))throw new RangeError("Format string contains an unescaped latin alphabet character `"+b+"`");if("''"===y?y="'":"'"===b&&(y=Ft(y)),0!==a.indexOf(y))return new Date(NaN);a=a.slice(y.length)}}if(a.length>0&&Wt.test(a))return new Date(NaN);var P=w.map((function(e){return e.priority})).sort((function(e,t){return t-e})).filter((function(e,t,n){return n.indexOf(e)===t})).map((function(e){return w.filter((function(t){return t.priority===e})).sort((function(e,t){return t.subPriority-e.subPriority}))})).map((function(e){return e[0]})),S=W(n);if(isNaN(S))return new Date(NaN);var U=_(S,ke(S)),j={};for(h=0;h<P.length;h++){var E=P[h];if(E.validate&&!E.validate(U,E.value,g))return new Date(NaN);var M=E.set(U,j,E.value,g);M[0]?(U=M[0],_e(j,M[1])):U=M}return U}(t.querySelector(".todoDueDate").textContent,"MM/dd/yyyy",new Date).toISOString().slice(0,10)}(e)}})),Kt.addEventListener("click",(function(e){if(Ke(e,"I","deleteTodo")){let t=e.target.closest(".todo"),n=t.querySelector(".todoTitle").textContent;if(confirm(`Are you sure you want to delete ${n}?`)){let e=t.dataset.id,n=t.dataset.project;Xe.deleteTodo(n,e),bn()}}})),Kt.addEventListener("click",(function(e){if(Ke(e,"I","completeTodo")){let t=e.target.closest(".todo"),n=t.dataset.project,r=t.dataset.id;console.log(`Complete ${n}: ${r}`),Xe.completeTodo(n,r);let a=Zt.querySelector(".active");a.classList.contains("userProject")?hn(a.dataset.index):a.classList.contains("navProject")&&Cn(a.dataset.index)}})),Vt.addEventListener("click",yn),en.addEventListener("click",yn),tn.addEventListener("click",yn),nn.addEventListener("click",yn),_t.addEventListener("click",yn),Xt.addEventListener("click",(function(){confirm("Do you want to reset your Todo App?")&&confirm("There is no retrieving this data.")&&(localStorage.clear(),Cn("all"),mn(),pn(".homePageBtn"))})),an.addEventListener("submit",(function(e){e.preventDefault();let t,n=wn("new");if(function(e,t){for(let t of e)if(console.log(t),""===t)return!0;return!1}(n))return;t=Jt.querySelector(".active")?Jt.querySelector(".active").textContent:"default",Xe.createNewTodo(n,t);let r=Zt.querySelector(".active").dataset.index;console.log(r),["all","today","pastDue","thisWeek"].includes(r)?Cn(r):hn(r),An()})),on.addEventListener("click",An),un.addEventListener("submit",(function(e){e.preventDefault();let t=wn("update"),n=e.target.dataset.project,r=e.target.dataset.id,a=function(e,t,n){let r=new j(e[0],e[1],e[2],e[3]);return r.project=t,r.completed=M(n),r}(t,n,e.target.dataset.completed);Xe.updateTodo(n,r,a),gn(),bn()})),cn.addEventListener("click",gn)}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,